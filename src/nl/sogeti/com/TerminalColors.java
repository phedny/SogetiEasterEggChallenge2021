package nl.sogeti.com;

public class TerminalColors {
    private static final byte[][] COLOR_TABLE = new byte[][]{{0, 0, 0}, {-86, 0, 0}, {0, -86, 0}, {-86, 85, 0}, {0, 0, -86}, {-86, 0, -86}, {0, -86, -86}, {-86, -86, -86}, {85, 85, 85}, {-1, 85, 85}, {85, -1, 85}, {-1, -1, 85}, {85, 85, -1}, {-1, 85, -1}, {85, -1, -1}, {-1, -1, -1}, {0, 0, 0}, {0, 0, 95}, {0, 0, -121}, {0, 0, -81}, {0, 0, -41}, {0, 0, -1}, {0, 95, 0}, {0, 95, 95}, {0, 95, -121}, {0, 95, -81}, {0, 95, -41}, {0, 95, -1}, {0, -121, 0}, {0, -121, 95}, {0, -121, -121}, {0, -121, -81}, {0, -121, -41}, {0, -121, -1}, {0, -81, 0}, {0, -81, 95}, {0, -81, -121}, {0, -81, -81}, {0, -81, -41}, {0, -81, -1}, {0, -41, 0}, {0, -41, 95}, {0, -41, -121}, {0, -41, -81}, {0, -41, -41}, {0, -41, -1}, {0, -1, 0}, {0, -1, 95}, {0, -1, -121}, {0, -1, -81}, {0, -1, -41}, {0, -1, -1}, {95, 0, 0}, {95, 0, 95}, {95, 0, -121}, {95, 0, -81}, {95, 0, -41}, {95, 0, -1}, {95, 95, 0}, {95, 95, 95}, {95, 95, -121}, {95, 95, -81}, {95, 95, -41}, {95, 95, -1}, {95, -121, 0}, {95, -121, 95}, {95, -121, -121}, {95, -121, -81}, {95, -121, -41}, {95, -121, -1}, {95, -81, 0}, {95, -81, 95}, {95, -81, -121}, {95, -81, -81}, {95, -81, -41}, {95, -81, -1}, {95, -41, 0}, {95, -41, 95}, {95, -41, -121}, {95, -41, -81}, {95, -41, -41}, {95, -41, -1}, {95, -1, 0}, {95, -1, 95}, {95, -1, -121}, {95, -1, -81}, {95, -1, -41}, {95, -1, -1}, {-121, 0, 0}, {-121, 0, 95}, {-121, 0, -121}, {-121, 0, -81}, {-121, 0, -41}, {-121, 0, -1}, {-121, 95, 0}, {-121, 95, 95}, {-121, 95, -121}, {-121, 95, -81}, {-121, 95, -41}, {-121, 95, -1}, {-121, -121, 0}, {-121, -121, 95}, {-121, -121, -121}, {-121, -121, -81}, {-121, -121, -41}, {-121, -121, -1}, {-121, -81, 0}, {-121, -81, 95}, {-121, -81, -121}, {-121, -81, -81}, {-121, -81, -41}, {-121, -81, -1}, {-121, -41, 0}, {-121, -41, 95}, {-121, -41, -121}, {-121, -41, -81}, {-121, -41, -41}, {-121, -41, -1}, {-121, -1, 0}, {-121, -1, 95}, {-121, -1, -121}, {-121, -1, -81}, {-121, -1, -41}, {-121, -1, -1}, {-81, 0, 0}, {-81, 0, 95}, {-81, 0, -121}, {-81, 0, -81}, {-81, 0, -41}, {-81, 0, -1}, {-81, 95, 0}, {-81, 95, 95}, {-81, 95, -121}, {-81, 95, -81}, {-81, 95, -41}, {-81, 95, -1}, {-81, -121, 0}, {-81, -121, 95}, {-81, -121, -121}, {-81, -121, -81}, {-81, -121, -41}, {-81, -121, -1}, {-81, -81, 0}, {-81, -81, 95}, {-81, -81, -121}, {-81, -81, -81}, {-81, -81, -41}, {-81, -81, -1}, {-81, -41, 0}, {-81, -41, 95}, {-81, -41, -121}, {-81, -41, -81}, {-81, -41, -41}, {-81, -41, -1}, {-81, -1, 0}, {-81, -1, 95}, {-81, -1, -121}, {-81, -1, -81}, {-81, -1, -41}, {-81, -1, -1}, {-41, 0, 0}, {-41, 0, 95}, {-41, 0, -121}, {-41, 0, -81}, {-41, 0, -41}, {-41, 0, -1}, {-41, 95, 0}, {-41, 95, 95}, {-41, 95, -121}, {-41, 95, -81}, {-41, 95, -41}, {-41, 95, -1}, {-41, -121, 0}, {-41, -121, 95}, {-41, -121, -121}, {-41, -121, -81}, {-41, -121, -41}, {-41, -121, -1}, {-41, -81, 0}, {-41, -81, 95}, {-41, -81, -121}, {-41, -81, -81}, {-41, -81, -41}, {-41, -81, -1}, {-41, -41, 0}, {-41, -41, 95}, {-41, -41, -121}, {-41, -41, -81}, {-41, -41, -41}, {-41, -41, -1}, {-41, -1, 0}, {-41, -1, 95}, {-41, -1, -121}, {-41, -1, -81}, {-41, -1, -41}, {-41, -1, -1}, {-1, 0, 0}, {-1, 0, 95}, {-1, 0, -121}, {-1, 0, -81}, {-1, 0, -41}, {-1, 0, -1}, {-1, 95, 0}, {-1, 95, 95}, {-1, 95, -121}, {-1, 95, -81}, {-1, 95, -41}, {-1, 95, -1}, {-1, -121, 0}, {-1, -121, 95}, {-1, -121, -121}, {-1, -121, -81}, {-1, -121, -41}, {-1, -121, -1}, {-1, -81, 0}, {-1, -81, 95}, {-1, -81, -121}, {-1, -81, -81}, {-1, -81, -41}, {-1, -81, -1}, {-1, -41, 0}, {-1, -41, 95}, {-1, -41, -121}, {-1, -41, -81}, {-1, -41, -41}, {-1, -41, -1}, {-1, -1, 0}, {-1, -1, 95}, {-1, -1, -121}, {-1, -1, -81}, {-1, -1, -41}, {-1, -1, -1}, {8, 8, 8}, {18, 18, 18}, {28, 28, 28}, {38, 38, 38}, {48, 48, 48}, {58, 58, 58}, {68, 68, 68}, {78, 78, 78}, {88, 88, 88}, {98, 98, 98}, {108, 108, 108}, {118, 118, 118}, {-128, -128, -128}, {-118, -118, -118}, {-108, -108, -108}, {-98, -98, -98}, {-88, -88, -88}, {-78, -78, -78}, {-68, -68, -68}, {-58, -58, -58}, {-48, -48, -48}, {-38, -38, -38}, {-28, -28, -28}, {-18, -18, -18}};

    public static String sequenceForRGB(int red, int green, int blue) {
        if ("256".equals(System.getProperty("colors"))) {
            return "\u001B[48;5;" + indexForRGB(red, green, blue) + "m";
        } else {
            return "\u001B[48;2;" + red + ";" + green + ";" + blue + "m";
        }
    }

    public static int indexForRGB(int red, int green, int blue) {
        final int colorIndex = (blue * 5 / 255) + 6 * (green * 5 / 255) + 36 * (red * 5 / 255) + 16;
        final int grayIndex = 232 + (red + green + blue) * 5 / 765;

        final int distanceToColorIndex = (red - redOf(colorIndex)) * (red - redOf(colorIndex)) + (green - greenOf(colorIndex)) * (green - greenOf(colorIndex)) + (blue - blueOf(colorIndex)) * (blue - blueOf(colorIndex));
        final int distanceToGrayIndex = (red - redOf(grayIndex)) * (red - redOf(grayIndex)) + (green - greenOf(grayIndex)) * (green - greenOf(grayIndex)) + (blue - blueOf(grayIndex)) * (blue - blueOf(grayIndex));
        if (distanceToColorIndex < distanceToGrayIndex) {
            return colorIndex;
        } else {
            return grayIndex;
        }
    }

    private static int redOf(int i) {
        return COLOR_TABLE[i][0] & 0xff;
    }

    private static int greenOf(int i) {
        return COLOR_TABLE[i][1] & 0xff;
    }

    private static int blueOf(int i) {
        return COLOR_TABLE[i][2] & 0xff;
    }
}
